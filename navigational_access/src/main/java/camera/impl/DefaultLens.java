package camera.impl;

import camera.*;


import java.net.URI;
import java.io.Serializable;
import javax.jdo.annotations.Embedded;
import javax.persistence.Basic;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;

import java.util.Collection;
import javax.xml.datatype.XMLGregorianCalendar;

import org.protege.owl.codegeneration.WrappedIndividual;
import org.protege.owl.codegeneration.impl.WrappedIndividualImpl;

import org.protege.owl.codegeneration.inference.CodeGenerationInference;

import org.semanticweb.owlapi.model.IRI;
import org.semanticweb.owlapi.model.OWLOntology;


/**
 * Generated by Protege (http://protege.stanford.edu).<br>
 * Source Class: DefaultLens <br>
 * @version generated on Sun May 16 18:13:09 IST 2021 by ayushyadav
 */
@Entity
 public class DefaultLens extends WrappedIndividualImpl implements Lens , Serializable {
	 private static final long serialVersionUID = 1L;
	 @GeneratedValue
	 private long id;
	 @Id 
	 private String name;

private Collection < ? extends Body > CompatibleWith ; ;
private Collection < ? extends Money > Cost ; ;
private Collection < ? extends String > Aperture ; ;
private Collection < ? extends String > F_stop ; ;
private Collection < ? extends String > Focal_length ; ;
private Collection < ? extends String > Size ;

    public DefaultLens(CodeGenerationInference inference, IRI iri) {
        super(inference, iri);
	name = iri.toString();
	
	CompatibleWith= getCompatibleWith();
	Cost= getCost();
	Aperture= getAperture();
	F_stop= getF_stop();
	Focal_length= getFocal_length();
	Size= getSize();
    }





    /* ***************************************************
     * Object Property http://www.xfront.com/owl/ontologies/camera/#compatibleWith
     */
     
    public Collection<? extends Body> getCompatibleWith() {
        return getDelegate().getPropertyValues(getOwlIndividual(),
                                               Vocabulary.OBJECT_PROPERTY_COMPATIBLEWITH,
                                               DefaultBody.class);
    }

    public boolean hasCompatibleWith() {
	   return !getCompatibleWith().isEmpty();
    }

    public void addCompatibleWith(Body newCompatibleWith) {
        getDelegate().addPropertyValue(getOwlIndividual(),
                                       Vocabulary.OBJECT_PROPERTY_COMPATIBLEWITH,
                                       newCompatibleWith);
    }

    public void removeCompatibleWith(Body oldCompatibleWith) {
        getDelegate().removePropertyValue(getOwlIndividual(),
                                          Vocabulary.OBJECT_PROPERTY_COMPATIBLEWITH,
                                          oldCompatibleWith);
    }


    /* ***************************************************
     * Object Property http://www.xfront.com/owl/ontologies/camera/#cost
     */
     
    public Collection<? extends Money> getCost() {
        return getDelegate().getPropertyValues(getOwlIndividual(),
                                               Vocabulary.OBJECT_PROPERTY_COST,
                                               DefaultMoney.class);
    }

    public boolean hasCost() {
	   return !getCost().isEmpty();
    }

    public void addCost(Money newCost) {
        getDelegate().addPropertyValue(getOwlIndividual(),
                                       Vocabulary.OBJECT_PROPERTY_COST,
                                       newCost);
    }

    public void removeCost(Money oldCost) {
        getDelegate().removePropertyValue(getOwlIndividual(),
                                          Vocabulary.OBJECT_PROPERTY_COST,
                                          oldCost);
    }


    /* ***************************************************
     * Data Property http://www.xfront.com/owl/ontologies/camera/#aperture
     */
     
    public Collection<? extends String> getAperture() {
		return getDelegate().getPropertyValues(getOwlIndividual(), Vocabulary.DATA_PROPERTY_APERTURE, String.class);
    }

    public boolean hasAperture() {
		return !getAperture().isEmpty();
    }

    public void addAperture(String newAperture) {
	    getDelegate().addPropertyValue(getOwlIndividual(), Vocabulary.DATA_PROPERTY_APERTURE, newAperture);
    }

    public void removeAperture(String oldAperture) {
		getDelegate().removePropertyValue(getOwlIndividual(), Vocabulary.DATA_PROPERTY_APERTURE, oldAperture);
    }


    /* ***************************************************
     * Data Property http://www.xfront.com/owl/ontologies/camera/#f-stop
     */
     
    public Collection<? extends String> getF_stop() {
		return getDelegate().getPropertyValues(getOwlIndividual(), Vocabulary.DATA_PROPERTY_F_STOP, String.class);
    }

    public boolean hasF_stop() {
		return !getF_stop().isEmpty();
    }

    public void addF_stop(String newF_stop) {
	    getDelegate().addPropertyValue(getOwlIndividual(), Vocabulary.DATA_PROPERTY_F_STOP, newF_stop);
    }

    public void removeF_stop(String oldF_stop) {
		getDelegate().removePropertyValue(getOwlIndividual(), Vocabulary.DATA_PROPERTY_F_STOP, oldF_stop);
    }


    /* ***************************************************
     * Data Property http://www.xfront.com/owl/ontologies/camera/#focal-length
     */
     
    public Collection<? extends String> getFocal_length() {
		return getDelegate().getPropertyValues(getOwlIndividual(), Vocabulary.DATA_PROPERTY_FOCAL_LENGTH, String.class);
    }

    public boolean hasFocal_length() {
		return !getFocal_length().isEmpty();
    }

    public void addFocal_length(String newFocal_length) {
	    getDelegate().addPropertyValue(getOwlIndividual(), Vocabulary.DATA_PROPERTY_FOCAL_LENGTH, newFocal_length);
    }

    public void removeFocal_length(String oldFocal_length) {
		getDelegate().removePropertyValue(getOwlIndividual(), Vocabulary.DATA_PROPERTY_FOCAL_LENGTH, oldFocal_length);
    }


    /* ***************************************************
     * Data Property http://www.xfront.com/owl/ontologies/camera/#size
     */
     
    public Collection<? extends String> getSize() {
		return getDelegate().getPropertyValues(getOwlIndividual(), Vocabulary.DATA_PROPERTY_SIZE, String.class);
    }

    public boolean hasSize() {
		return !getSize().isEmpty();
    }

    public void addSize(String newSize) {
	    getDelegate().addPropertyValue(getOwlIndividual(), Vocabulary.DATA_PROPERTY_SIZE, newSize);
    }

    public void removeSize(String oldSize) {
		getDelegate().removePropertyValue(getOwlIndividual(), Vocabulary.DATA_PROPERTY_SIZE, oldSize);
    }


}
