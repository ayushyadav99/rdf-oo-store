package camera;

import camera.impl.*;


import java.util.Collection;

import org.protege.owl.codegeneration.CodeGenerationFactory;
import org.protege.owl.codegeneration.WrappedIndividual;
import org.protege.owl.codegeneration.impl.FactoryHelper;
import org.protege.owl.codegeneration.impl.ProtegeJavaMapping;
import org.protege.owl.codegeneration.inference.CodeGenerationInference;
import org.protege.owl.codegeneration.inference.SimpleInference;

import org.semanticweb.owlapi.model.OWLClass;
import org.semanticweb.owlapi.model.OWLOntology;
import org.semanticweb.owlapi.model.OWLOntologyStorageException;

/**
 * A class that serves as the entry point to the generated code providing access
 * to existing individuals in the ontology and the ability to create new individuals in the ontology.<p>
 * 
 * Generated by Protege (http://protege.stanford.edu).<br>
 * Source Class: MyFactory<br>
 * @version generated on Sun May 16 18:13:09 IST 2021 by ayushyadav
 */
public class MyFactory implements CodeGenerationFactory {
    private OWLOntology ontology;
    private ProtegeJavaMapping javaMapping = new ProtegeJavaMapping();
    private FactoryHelper delegate;
    private CodeGenerationInference inference;

    public MyFactory(OWLOntology ontology) {
	    this(ontology, new SimpleInference(ontology));
    }
    
    public MyFactory(OWLOntology ontology, CodeGenerationInference inference) {
        this.ontology = ontology;
        this.inference = inference;
        javaMapping.initialize(ontology, inference);
        delegate = new FactoryHelper(ontology, inference);
    }

    public OWLOntology getOwlOntology() {
        return ontology;
    }
    
    public void saveOwlOntology() throws OWLOntologyStorageException {
        ontology.getOWLOntologyManager().saveOntology(ontology);
    }
    
    public void flushOwlReasoner() {
        delegate.flushOwlReasoner();
    }
    
    public boolean canAs(WrappedIndividual resource, Class<? extends WrappedIndividual> javaInterface) {
    	return javaMapping.canAs(resource, javaInterface);
    }
    
    public  <X extends WrappedIndividual> X as(WrappedIndividual resource, Class<? extends X> javaInterface) {
    	return javaMapping.as(resource, javaInterface);
    }
    
    public Class<?> getJavaInterfaceFromOwlClass(OWLClass cls) {
        return javaMapping.getJavaInterfaceFromOwlClass(cls);
    }
    
    public OWLClass getOwlClassFromJavaInterface(Class<?> javaInterface) {
	    return javaMapping.getOwlClassFromJavaInterface(javaInterface);
    }
    
    public CodeGenerationInference getInference() {
        return inference;
    }

    /* ***************************************************
     * Class http://www.xfront.com/owl/ontologies/camera/#Body
     */

    {
        javaMapping.add("http://www.xfront.com/owl/ontologies/camera/#Body", Body.class, DefaultBody.class);
    }

    /**
     * Creates an instance of type Body.  Modifies the underlying ontology.
     */
    public Body createBody(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_BODY, DefaultBody.class);
    }

    /**
     * Gets an instance of type Body with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Body getBody(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_BODY, DefaultBody.class);
    }

    /**
     * Gets all instances of Body from the ontology.
     */
    public Collection<? extends Body> getAllBodyInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_BODY, DefaultBody.class);
    }


    /* ***************************************************
     * Class http://www.xfront.com/owl/ontologies/camera/#BodyWithNonAdjustableShutterSpeed
     */

    {
        javaMapping.add("http://www.xfront.com/owl/ontologies/camera/#BodyWithNonAdjustableShutterSpeed", BodyWithNonAdjustableShutterSpeed.class, DefaultBodyWithNonAdjustableShutterSpeed.class);
    }

    /**
     * Creates an instance of type BodyWithNonAdjustableShutterSpeed.  Modifies the underlying ontology.
     */
    public BodyWithNonAdjustableShutterSpeed createBodyWithNonAdjustableShutterSpeed(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_BODYWITHNONADJUSTABLESHUTTERSPEED, DefaultBodyWithNonAdjustableShutterSpeed.class);
    }

    /**
     * Gets an instance of type BodyWithNonAdjustableShutterSpeed with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public BodyWithNonAdjustableShutterSpeed getBodyWithNonAdjustableShutterSpeed(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_BODYWITHNONADJUSTABLESHUTTERSPEED, DefaultBodyWithNonAdjustableShutterSpeed.class);
    }

    /**
     * Gets all instances of BodyWithNonAdjustableShutterSpeed from the ontology.
     */
    public Collection<? extends BodyWithNonAdjustableShutterSpeed> getAllBodyWithNonAdjustableShutterSpeedInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_BODYWITHNONADJUSTABLESHUTTERSPEED, DefaultBodyWithNonAdjustableShutterSpeed.class);
    }


    /* ***************************************************
     * Class http://www.xfront.com/owl/ontologies/camera/#Camera
     */

    {
        javaMapping.add("http://www.xfront.com/owl/ontologies/camera/#Camera", Camera.class, DefaultCamera.class);
    }

    /**
     * Creates an instance of type Camera.  Modifies the underlying ontology.
     */
    public Camera createCamera(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_CAMERA, DefaultCamera.class);
    }

    /**
     * Gets an instance of type Camera with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Camera getCamera(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_CAMERA, DefaultCamera.class);
    }

    /**
     * Gets all instances of Camera from the ontology.
     */
    public Collection<? extends Camera> getAllCameraInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_CAMERA, DefaultCamera.class);
    }


    /* ***************************************************
     * Class http://www.xfront.com/owl/ontologies/camera/#Digital
     */

    {
        javaMapping.add("http://www.xfront.com/owl/ontologies/camera/#Digital", Digital.class, DefaultDigital.class);
    }

    /**
     * Creates an instance of type Digital.  Modifies the underlying ontology.
     */
    public Digital createDigital(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_DIGITAL, DefaultDigital.class);
    }

    /**
     * Gets an instance of type Digital with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Digital getDigital(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_DIGITAL, DefaultDigital.class);
    }

    /**
     * Gets all instances of Digital from the ontology.
     */
    public Collection<? extends Digital> getAllDigitalInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_DIGITAL, DefaultDigital.class);
    }


    /* ***************************************************
     * Class http://www.xfront.com/owl/ontologies/camera/#Large-Format
     */

    {
        javaMapping.add("http://www.xfront.com/owl/ontologies/camera/#Large-Format", Large_Format.class, DefaultLarge_Format.class);
    }

    /**
     * Creates an instance of type Large_Format.  Modifies the underlying ontology.
     */
    public Large_Format createLarge_Format(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_LARGE_FORMAT, DefaultLarge_Format.class);
    }

    /**
     * Gets an instance of type Large_Format with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Large_Format getLarge_Format(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_LARGE_FORMAT, DefaultLarge_Format.class);
    }

    /**
     * Gets all instances of Large_Format from the ontology.
     */
    public Collection<? extends Large_Format> getAllLarge_FormatInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_LARGE_FORMAT, DefaultLarge_Format.class);
    }


    /* ***************************************************
     * Class http://www.xfront.com/owl/ontologies/camera/#Lens
     */

    {
        javaMapping.add("http://www.xfront.com/owl/ontologies/camera/#Lens", Lens.class, DefaultLens.class);
    }

    /**
     * Creates an instance of type Lens.  Modifies the underlying ontology.
     */
    public Lens createLens(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_LENS, DefaultLens.class);
    }

    /**
     * Gets an instance of type Lens with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Lens getLens(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_LENS, DefaultLens.class);
    }

    /**
     * Gets all instances of Lens from the ontology.
     */
    public Collection<? extends Lens> getAllLensInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_LENS, DefaultLens.class);
    }


    /* ***************************************************
     * Class http://www.xfront.com/owl/ontologies/camera/#Money
     */

    {
        javaMapping.add("http://www.xfront.com/owl/ontologies/camera/#Money", Money.class, DefaultMoney.class);
    }

    /**
     * Creates an instance of type Money.  Modifies the underlying ontology.
     */
    public Money createMoney(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_MONEY, DefaultMoney.class);
    }

    /**
     * Gets an instance of type Money with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Money getMoney(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_MONEY, DefaultMoney.class);
    }

    /**
     * Gets all instances of Money from the ontology.
     */
    public Collection<? extends Money> getAllMoneyInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_MONEY, DefaultMoney.class);
    }


    /* ***************************************************
     * Class http://www.xfront.com/owl/ontologies/camera/#PurchaseableItem
     */

    {
        javaMapping.add("http://www.xfront.com/owl/ontologies/camera/#PurchaseableItem", PurchaseableItem.class, DefaultPurchaseableItem.class);
    }

    /**
     * Creates an instance of type PurchaseableItem.  Modifies the underlying ontology.
     */
    public PurchaseableItem createPurchaseableItem(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_PURCHASEABLEITEM, DefaultPurchaseableItem.class);
    }

    /**
     * Gets an instance of type PurchaseableItem with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public PurchaseableItem getPurchaseableItem(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_PURCHASEABLEITEM, DefaultPurchaseableItem.class);
    }

    /**
     * Gets all instances of PurchaseableItem from the ontology.
     */
    public Collection<? extends PurchaseableItem> getAllPurchaseableItemInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_PURCHASEABLEITEM, DefaultPurchaseableItem.class);
    }


    /* ***************************************************
     * Class http://www.xfront.com/owl/ontologies/camera/#Range
     */

    {
        javaMapping.add("http://www.xfront.com/owl/ontologies/camera/#Range", Range.class, DefaultRange.class);
    }

    /**
     * Creates an instance of type Range.  Modifies the underlying ontology.
     */
    public Range createRange(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_RANGE, DefaultRange.class);
    }

    /**
     * Gets an instance of type Range with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Range getRange(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_RANGE, DefaultRange.class);
    }

    /**
     * Gets all instances of Range from the ontology.
     */
    public Collection<? extends Range> getAllRangeInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_RANGE, DefaultRange.class);
    }


    /* ***************************************************
     * Class http://www.xfront.com/owl/ontologies/camera/#SLR
     */

    {
        javaMapping.add("http://www.xfront.com/owl/ontologies/camera/#SLR", SLR.class, DefaultSLR.class);
    }

    /**
     * Creates an instance of type SLR.  Modifies the underlying ontology.
     */
    public SLR createSLR(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_SLR, DefaultSLR.class);
    }

    /**
     * Gets an instance of type SLR with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public SLR getSLR(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_SLR, DefaultSLR.class);
    }

    /**
     * Gets all instances of SLR from the ontology.
     */
    public Collection<? extends SLR> getAllSLRInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_SLR, DefaultSLR.class);
    }


    /* ***************************************************
     * Class http://www.xfront.com/owl/ontologies/camera/#Viewer
     */

    {
        javaMapping.add("http://www.xfront.com/owl/ontologies/camera/#Viewer", Viewer.class, DefaultViewer.class);
    }

    /**
     * Creates an instance of type Viewer.  Modifies the underlying ontology.
     */
    public Viewer createViewer(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_VIEWER, DefaultViewer.class);
    }

    /**
     * Gets an instance of type Viewer with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Viewer getViewer(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_VIEWER, DefaultViewer.class);
    }

    /**
     * Gets all instances of Viewer from the ontology.
     */
    public Collection<? extends Viewer> getAllViewerInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_VIEWER, DefaultViewer.class);
    }


    /* ***************************************************
     * Class http://www.xfront.com/owl/ontologies/camera/#Window
     */

    {
        javaMapping.add("http://www.xfront.com/owl/ontologies/camera/#Window", Window.class, DefaultWindow.class);
    }

    /**
     * Creates an instance of type Window.  Modifies the underlying ontology.
     */
    public Window createWindow(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_WINDOW, DefaultWindow.class);
    }

    /**
     * Gets an instance of type Window with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Window getWindow(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_WINDOW, DefaultWindow.class);
    }

    /**
     * Gets all instances of Window from the ontology.
     */
    public Collection<? extends Window> getAllWindowInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_WINDOW, DefaultWindow.class);
    }


}
