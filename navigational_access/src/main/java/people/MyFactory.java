package people;

import people.impl.*;


import java.util.Collection;

import org.protege.owl.codegeneration.CodeGenerationFactory;
import org.protege.owl.codegeneration.WrappedIndividual;
import org.protege.owl.codegeneration.impl.FactoryHelper;
import org.protege.owl.codegeneration.impl.ProtegeJavaMapping;
import org.protege.owl.codegeneration.inference.CodeGenerationInference;
import org.protege.owl.codegeneration.inference.SimpleInference;

import org.semanticweb.owlapi.model.OWLClass;
import org.semanticweb.owlapi.model.OWLOntology;
import org.semanticweb.owlapi.model.OWLOntologyStorageException;

/**
 * A class that serves as the entry point to the generated code providing access
 * to existing individuals in the ontology and the ability to create new individuals in the ontology.<p>
 * 
 * Generated by Protege (http://protege.stanford.edu).<br>
 * Source Class: MyFactory<br>
 * @version generated on Sun May 16 17:26:14 IST 2021 by ayushyadav
 */
public class MyFactory implements CodeGenerationFactory {
    private OWLOntology ontology;
    private ProtegeJavaMapping javaMapping = new ProtegeJavaMapping();
    private FactoryHelper delegate;
    private CodeGenerationInference inference;

    public MyFactory(OWLOntology ontology) {
	    this(ontology, new SimpleInference(ontology));
    }
    
    public MyFactory(OWLOntology ontology, CodeGenerationInference inference) {
        this.ontology = ontology;
        this.inference = inference;
        javaMapping.initialize(ontology, inference);
        delegate = new FactoryHelper(ontology, inference);
    }

    public OWLOntology getOwlOntology() {
        return ontology;
    }
    
    public void saveOwlOntology() throws OWLOntologyStorageException {
        ontology.getOWLOntologyManager().saveOntology(ontology);
    }
    
    public void flushOwlReasoner() {
        delegate.flushOwlReasoner();
    }
    
    public boolean canAs(WrappedIndividual resource, Class<? extends WrappedIndividual> javaInterface) {
    	return javaMapping.canAs(resource, javaInterface);
    }
    
    public  <X extends WrappedIndividual> X as(WrappedIndividual resource, Class<? extends X> javaInterface) {
    	return javaMapping.as(resource, javaInterface);
    }
    
    public Class<?> getJavaInterfaceFromOwlClass(OWLClass cls) {
        return javaMapping.getJavaInterfaceFromOwlClass(cls);
    }
    
    public OWLClass getOwlClassFromJavaInterface(Class<?> javaInterface) {
	    return javaMapping.getOwlClassFromJavaInterface(javaInterface);
    }
    
    public CodeGenerationInference getInference() {
        return inference;
    }

    /* ***************************************************
     * Class http://owl.man.ac.uk/2006/07/sssw/people#adult
     */

    {
        javaMapping.add("http://owl.man.ac.uk/2006/07/sssw/people#adult", Adult.class, DefaultAdult.class);
    }

    /**
     * Creates an instance of type Adult.  Modifies the underlying ontology.
     */
    public Adult createAdult(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_ADULT, DefaultAdult.class);
    }

    /**
     * Gets an instance of type Adult with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Adult getAdult(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_ADULT, DefaultAdult.class);
    }

    /**
     * Gets all instances of Adult from the ontology.
     */
    public Collection<? extends Adult> getAllAdultInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_ADULT, DefaultAdult.class);
    }


    /* ***************************************************
     * Class http://owl.man.ac.uk/2006/07/sssw/people#animal
     */

    {
        javaMapping.add("http://owl.man.ac.uk/2006/07/sssw/people#animal", Animal.class, DefaultAnimal.class);
    }

    /**
     * Creates an instance of type Animal.  Modifies the underlying ontology.
     */
    public Animal createAnimal(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_ANIMAL, DefaultAnimal.class);
    }

    /**
     * Gets an instance of type Animal with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Animal getAnimal(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_ANIMAL, DefaultAnimal.class);
    }

    /**
     * Gets all instances of Animal from the ontology.
     */
    public Collection<? extends Animal> getAllAnimalInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_ANIMAL, DefaultAnimal.class);
    }


    /* ***************************************************
     * Class http://owl.man.ac.uk/2006/07/sssw/people#animal_lover
     */

    {
        javaMapping.add("http://owl.man.ac.uk/2006/07/sssw/people#animal_lover", Animal_lover.class, DefaultAnimal_lover.class);
    }

    /**
     * Creates an instance of type Animal_lover.  Modifies the underlying ontology.
     */
    public Animal_lover createAnimal_lover(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_ANIMAL_LOVER, DefaultAnimal_lover.class);
    }

    /**
     * Gets an instance of type Animal_lover with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Animal_lover getAnimal_lover(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_ANIMAL_LOVER, DefaultAnimal_lover.class);
    }

    /**
     * Gets all instances of Animal_lover from the ontology.
     */
    public Collection<? extends Animal_lover> getAllAnimal_loverInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_ANIMAL_LOVER, DefaultAnimal_lover.class);
    }


    /* ***************************************************
     * Class http://owl.man.ac.uk/2006/07/sssw/people#bicycle
     */

    {
        javaMapping.add("http://owl.man.ac.uk/2006/07/sssw/people#bicycle", Bicycle.class, DefaultBicycle.class);
    }

    /**
     * Creates an instance of type Bicycle.  Modifies the underlying ontology.
     */
    public Bicycle createBicycle(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_BICYCLE, DefaultBicycle.class);
    }

    /**
     * Gets an instance of type Bicycle with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Bicycle getBicycle(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_BICYCLE, DefaultBicycle.class);
    }

    /**
     * Gets all instances of Bicycle from the ontology.
     */
    public Collection<? extends Bicycle> getAllBicycleInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_BICYCLE, DefaultBicycle.class);
    }


    /* ***************************************************
     * Class http://owl.man.ac.uk/2006/07/sssw/people#bone
     */

    {
        javaMapping.add("http://owl.man.ac.uk/2006/07/sssw/people#bone", Bone.class, DefaultBone.class);
    }

    /**
     * Creates an instance of type Bone.  Modifies the underlying ontology.
     */
    public Bone createBone(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_BONE, DefaultBone.class);
    }

    /**
     * Gets an instance of type Bone with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Bone getBone(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_BONE, DefaultBone.class);
    }

    /**
     * Gets all instances of Bone from the ontology.
     */
    public Collection<? extends Bone> getAllBoneInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_BONE, DefaultBone.class);
    }


    /* ***************************************************
     * Class http://owl.man.ac.uk/2006/07/sssw/people#brain
     */

    {
        javaMapping.add("http://owl.man.ac.uk/2006/07/sssw/people#brain", Brain.class, DefaultBrain.class);
    }

    /**
     * Creates an instance of type Brain.  Modifies the underlying ontology.
     */
    public Brain createBrain(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_BRAIN, DefaultBrain.class);
    }

    /**
     * Gets an instance of type Brain with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Brain getBrain(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_BRAIN, DefaultBrain.class);
    }

    /**
     * Gets all instances of Brain from the ontology.
     */
    public Collection<? extends Brain> getAllBrainInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_BRAIN, DefaultBrain.class);
    }


    /* ***************************************************
     * Class http://owl.man.ac.uk/2006/07/sssw/people#broadsheet
     */

    {
        javaMapping.add("http://owl.man.ac.uk/2006/07/sssw/people#broadsheet", Broadsheet.class, DefaultBroadsheet.class);
    }

    /**
     * Creates an instance of type Broadsheet.  Modifies the underlying ontology.
     */
    public Broadsheet createBroadsheet(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_BROADSHEET, DefaultBroadsheet.class);
    }

    /**
     * Gets an instance of type Broadsheet with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Broadsheet getBroadsheet(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_BROADSHEET, DefaultBroadsheet.class);
    }

    /**
     * Gets all instances of Broadsheet from the ontology.
     */
    public Collection<? extends Broadsheet> getAllBroadsheetInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_BROADSHEET, DefaultBroadsheet.class);
    }


    /* ***************************************************
     * Class http://owl.man.ac.uk/2006/07/sssw/people#bus
     */

    {
        javaMapping.add("http://owl.man.ac.uk/2006/07/sssw/people#bus", Bus.class, DefaultBus.class);
    }

    /**
     * Creates an instance of type Bus.  Modifies the underlying ontology.
     */
    public Bus createBus(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_BUS, DefaultBus.class);
    }

    /**
     * Gets an instance of type Bus with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Bus getBus(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_BUS, DefaultBus.class);
    }

    /**
     * Gets all instances of Bus from the ontology.
     */
    public Collection<? extends Bus> getAllBusInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_BUS, DefaultBus.class);
    }


    /* ***************************************************
     * Class http://owl.man.ac.uk/2006/07/sssw/people#bus_company
     */

    {
        javaMapping.add("http://owl.man.ac.uk/2006/07/sssw/people#bus_company", Bus_company.class, DefaultBus_company.class);
    }

    /**
     * Creates an instance of type Bus_company.  Modifies the underlying ontology.
     */
    public Bus_company createBus_company(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_BUS_COMPANY, DefaultBus_company.class);
    }

    /**
     * Gets an instance of type Bus_company with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Bus_company getBus_company(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_BUS_COMPANY, DefaultBus_company.class);
    }

    /**
     * Gets all instances of Bus_company from the ontology.
     */
    public Collection<? extends Bus_company> getAllBus_companyInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_BUS_COMPANY, DefaultBus_company.class);
    }


    /* ***************************************************
     * Class http://owl.man.ac.uk/2006/07/sssw/people#bus_driver
     */

    {
        javaMapping.add("http://owl.man.ac.uk/2006/07/sssw/people#bus_driver", Bus_driver.class, DefaultBus_driver.class);
    }

    /**
     * Creates an instance of type Bus_driver.  Modifies the underlying ontology.
     */
    public Bus_driver createBus_driver(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_BUS_DRIVER, DefaultBus_driver.class);
    }

    /**
     * Gets an instance of type Bus_driver with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Bus_driver getBus_driver(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_BUS_DRIVER, DefaultBus_driver.class);
    }

    /**
     * Gets all instances of Bus_driver from the ontology.
     */
    public Collection<? extends Bus_driver> getAllBus_driverInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_BUS_DRIVER, DefaultBus_driver.class);
    }


    /* ***************************************************
     * Class http://owl.man.ac.uk/2006/07/sssw/people#car
     */

    {
        javaMapping.add("http://owl.man.ac.uk/2006/07/sssw/people#car", Car.class, DefaultCar.class);
    }

    /**
     * Creates an instance of type Car.  Modifies the underlying ontology.
     */
    public Car createCar(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_CAR, DefaultCar.class);
    }

    /**
     * Gets an instance of type Car with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Car getCar(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_CAR, DefaultCar.class);
    }

    /**
     * Gets all instances of Car from the ontology.
     */
    public Collection<? extends Car> getAllCarInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_CAR, DefaultCar.class);
    }


    /* ***************************************************
     * Class http://owl.man.ac.uk/2006/07/sssw/people#cat
     */

    {
        javaMapping.add("http://owl.man.ac.uk/2006/07/sssw/people#cat", Cat.class, DefaultCat.class);
    }

    /**
     * Creates an instance of type Cat.  Modifies the underlying ontology.
     */
    public Cat createCat(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_CAT, DefaultCat.class);
    }

    /**
     * Gets an instance of type Cat with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Cat getCat(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_CAT, DefaultCat.class);
    }

    /**
     * Gets all instances of Cat from the ontology.
     */
    public Collection<? extends Cat> getAllCatInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_CAT, DefaultCat.class);
    }


    /* ***************************************************
     * Class http://owl.man.ac.uk/2006/07/sssw/people#cat_liker
     */

    {
        javaMapping.add("http://owl.man.ac.uk/2006/07/sssw/people#cat_liker", Cat_liker.class, DefaultCat_liker.class);
    }

    /**
     * Creates an instance of type Cat_liker.  Modifies the underlying ontology.
     */
    public Cat_liker createCat_liker(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_CAT_LIKER, DefaultCat_liker.class);
    }

    /**
     * Gets an instance of type Cat_liker with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Cat_liker getCat_liker(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_CAT_LIKER, DefaultCat_liker.class);
    }

    /**
     * Gets all instances of Cat_liker from the ontology.
     */
    public Collection<? extends Cat_liker> getAllCat_likerInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_CAT_LIKER, DefaultCat_liker.class);
    }


    /* ***************************************************
     * Class http://owl.man.ac.uk/2006/07/sssw/people#cat_owner
     */

    {
        javaMapping.add("http://owl.man.ac.uk/2006/07/sssw/people#cat_owner", Cat_owner.class, DefaultCat_owner.class);
    }

    /**
     * Creates an instance of type Cat_owner.  Modifies the underlying ontology.
     */
    public Cat_owner createCat_owner(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_CAT_OWNER, DefaultCat_owner.class);
    }

    /**
     * Gets an instance of type Cat_owner with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Cat_owner getCat_owner(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_CAT_OWNER, DefaultCat_owner.class);
    }

    /**
     * Gets all instances of Cat_owner from the ontology.
     */
    public Collection<? extends Cat_owner> getAllCat_ownerInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_CAT_OWNER, DefaultCat_owner.class);
    }


    /* ***************************************************
     * Class http://owl.man.ac.uk/2006/07/sssw/people#company
     */

    {
        javaMapping.add("http://owl.man.ac.uk/2006/07/sssw/people#company", Company.class, DefaultCompany.class);
    }

    /**
     * Creates an instance of type Company.  Modifies the underlying ontology.
     */
    public Company createCompany(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_COMPANY, DefaultCompany.class);
    }

    /**
     * Gets an instance of type Company with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Company getCompany(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_COMPANY, DefaultCompany.class);
    }

    /**
     * Gets all instances of Company from the ontology.
     */
    public Collection<? extends Company> getAllCompanyInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_COMPANY, DefaultCompany.class);
    }


    /* ***************************************************
     * Class http://owl.man.ac.uk/2006/07/sssw/people#cow
     */

    {
        javaMapping.add("http://owl.man.ac.uk/2006/07/sssw/people#cow", Cow.class, DefaultCow.class);
    }

    /**
     * Creates an instance of type Cow.  Modifies the underlying ontology.
     */
    public Cow createCow(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_COW, DefaultCow.class);
    }

    /**
     * Gets an instance of type Cow with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Cow getCow(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_COW, DefaultCow.class);
    }

    /**
     * Gets all instances of Cow from the ontology.
     */
    public Collection<? extends Cow> getAllCowInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_COW, DefaultCow.class);
    }


    /* ***************************************************
     * Class http://owl.man.ac.uk/2006/07/sssw/people#dog
     */

    {
        javaMapping.add("http://owl.man.ac.uk/2006/07/sssw/people#dog", Dog.class, DefaultDog.class);
    }

    /**
     * Creates an instance of type Dog.  Modifies the underlying ontology.
     */
    public Dog createDog(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_DOG, DefaultDog.class);
    }

    /**
     * Gets an instance of type Dog with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Dog getDog(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_DOG, DefaultDog.class);
    }

    /**
     * Gets all instances of Dog from the ontology.
     */
    public Collection<? extends Dog> getAllDogInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_DOG, DefaultDog.class);
    }


    /* ***************************************************
     * Class http://owl.man.ac.uk/2006/07/sssw/people#dog_liker
     */

    {
        javaMapping.add("http://owl.man.ac.uk/2006/07/sssw/people#dog_liker", Dog_liker.class, DefaultDog_liker.class);
    }

    /**
     * Creates an instance of type Dog_liker.  Modifies the underlying ontology.
     */
    public Dog_liker createDog_liker(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_DOG_LIKER, DefaultDog_liker.class);
    }

    /**
     * Gets an instance of type Dog_liker with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Dog_liker getDog_liker(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_DOG_LIKER, DefaultDog_liker.class);
    }

    /**
     * Gets all instances of Dog_liker from the ontology.
     */
    public Collection<? extends Dog_liker> getAllDog_likerInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_DOG_LIKER, DefaultDog_liker.class);
    }


    /* ***************************************************
     * Class http://owl.man.ac.uk/2006/07/sssw/people#dog_owner
     */

    {
        javaMapping.add("http://owl.man.ac.uk/2006/07/sssw/people#dog_owner", Dog_owner.class, DefaultDog_owner.class);
    }

    /**
     * Creates an instance of type Dog_owner.  Modifies the underlying ontology.
     */
    public Dog_owner createDog_owner(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_DOG_OWNER, DefaultDog_owner.class);
    }

    /**
     * Gets an instance of type Dog_owner with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Dog_owner getDog_owner(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_DOG_OWNER, DefaultDog_owner.class);
    }

    /**
     * Gets all instances of Dog_owner from the ontology.
     */
    public Collection<? extends Dog_owner> getAllDog_ownerInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_DOG_OWNER, DefaultDog_owner.class);
    }


    /* ***************************************************
     * Class http://owl.man.ac.uk/2006/07/sssw/people#driver
     */

    {
        javaMapping.add("http://owl.man.ac.uk/2006/07/sssw/people#driver", Driver.class, DefaultDriver.class);
    }

    /**
     * Creates an instance of type Driver.  Modifies the underlying ontology.
     */
    public Driver createDriver(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_DRIVER, DefaultDriver.class);
    }

    /**
     * Gets an instance of type Driver with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Driver getDriver(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_DRIVER, DefaultDriver.class);
    }

    /**
     * Gets all instances of Driver from the ontology.
     */
    public Collection<? extends Driver> getAllDriverInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_DRIVER, DefaultDriver.class);
    }


    /* ***************************************************
     * Class http://owl.man.ac.uk/2006/07/sssw/people#duck
     */

    {
        javaMapping.add("http://owl.man.ac.uk/2006/07/sssw/people#duck", Duck.class, DefaultDuck.class);
    }

    /**
     * Creates an instance of type Duck.  Modifies the underlying ontology.
     */
    public Duck createDuck(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_DUCK, DefaultDuck.class);
    }

    /**
     * Gets an instance of type Duck with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Duck getDuck(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_DUCK, DefaultDuck.class);
    }

    /**
     * Gets all instances of Duck from the ontology.
     */
    public Collection<? extends Duck> getAllDuckInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_DUCK, DefaultDuck.class);
    }


    /* ***************************************************
     * Class http://owl.man.ac.uk/2006/07/sssw/people#elderly
     */

    {
        javaMapping.add("http://owl.man.ac.uk/2006/07/sssw/people#elderly", Elderly.class, DefaultElderly.class);
    }

    /**
     * Creates an instance of type Elderly.  Modifies the underlying ontology.
     */
    public Elderly createElderly(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_ELDERLY, DefaultElderly.class);
    }

    /**
     * Gets an instance of type Elderly with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Elderly getElderly(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_ELDERLY, DefaultElderly.class);
    }

    /**
     * Gets all instances of Elderly from the ontology.
     */
    public Collection<? extends Elderly> getAllElderlyInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_ELDERLY, DefaultElderly.class);
    }


    /* ***************************************************
     * Class http://owl.man.ac.uk/2006/07/sssw/people#female
     */

    {
        javaMapping.add("http://owl.man.ac.uk/2006/07/sssw/people#female", Female.class, DefaultFemale.class);
    }

    /**
     * Creates an instance of type Female.  Modifies the underlying ontology.
     */
    public Female createFemale(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_FEMALE, DefaultFemale.class);
    }

    /**
     * Gets an instance of type Female with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Female getFemale(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_FEMALE, DefaultFemale.class);
    }

    /**
     * Gets all instances of Female from the ontology.
     */
    public Collection<? extends Female> getAllFemaleInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_FEMALE, DefaultFemale.class);
    }


    /* ***************************************************
     * Class http://owl.man.ac.uk/2006/07/sssw/people#giraffe
     */

    {
        javaMapping.add("http://owl.man.ac.uk/2006/07/sssw/people#giraffe", Giraffe.class, DefaultGiraffe.class);
    }

    /**
     * Creates an instance of type Giraffe.  Modifies the underlying ontology.
     */
    public Giraffe createGiraffe(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_GIRAFFE, DefaultGiraffe.class);
    }

    /**
     * Gets an instance of type Giraffe with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Giraffe getGiraffe(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_GIRAFFE, DefaultGiraffe.class);
    }

    /**
     * Gets all instances of Giraffe from the ontology.
     */
    public Collection<? extends Giraffe> getAllGiraffeInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_GIRAFFE, DefaultGiraffe.class);
    }


    /* ***************************************************
     * Class http://owl.man.ac.uk/2006/07/sssw/people#grass
     */

    {
        javaMapping.add("http://owl.man.ac.uk/2006/07/sssw/people#grass", Grass.class, DefaultGrass.class);
    }

    /**
     * Creates an instance of type Grass.  Modifies the underlying ontology.
     */
    public Grass createGrass(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_GRASS, DefaultGrass.class);
    }

    /**
     * Gets an instance of type Grass with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Grass getGrass(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_GRASS, DefaultGrass.class);
    }

    /**
     * Gets all instances of Grass from the ontology.
     */
    public Collection<? extends Grass> getAllGrassInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_GRASS, DefaultGrass.class);
    }


    /* ***************************************************
     * Class http://owl.man.ac.uk/2006/07/sssw/people#grownup
     */

    {
        javaMapping.add("http://owl.man.ac.uk/2006/07/sssw/people#grownup", Grownup.class, DefaultGrownup.class);
    }

    /**
     * Creates an instance of type Grownup.  Modifies the underlying ontology.
     */
    public Grownup createGrownup(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_GROWNUP, DefaultGrownup.class);
    }

    /**
     * Gets an instance of type Grownup with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Grownup getGrownup(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_GROWNUP, DefaultGrownup.class);
    }

    /**
     * Gets all instances of Grownup from the ontology.
     */
    public Collection<? extends Grownup> getAllGrownupInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_GROWNUP, DefaultGrownup.class);
    }


    /* ***************************************************
     * Class http://owl.man.ac.uk/2006/07/sssw/people#haulage_company
     */

    {
        javaMapping.add("http://owl.man.ac.uk/2006/07/sssw/people#haulage_company", Haulage_company.class, DefaultHaulage_company.class);
    }

    /**
     * Creates an instance of type Haulage_company.  Modifies the underlying ontology.
     */
    public Haulage_company createHaulage_company(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_HAULAGE_COMPANY, DefaultHaulage_company.class);
    }

    /**
     * Gets an instance of type Haulage_company with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Haulage_company getHaulage_company(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_HAULAGE_COMPANY, DefaultHaulage_company.class);
    }

    /**
     * Gets all instances of Haulage_company from the ontology.
     */
    public Collection<? extends Haulage_company> getAllHaulage_companyInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_HAULAGE_COMPANY, DefaultHaulage_company.class);
    }


    /* ***************************************************
     * Class http://owl.man.ac.uk/2006/07/sssw/people#haulage_truck_driver
     */

    {
        javaMapping.add("http://owl.man.ac.uk/2006/07/sssw/people#haulage_truck_driver", Haulage_truck_driver.class, DefaultHaulage_truck_driver.class);
    }

    /**
     * Creates an instance of type Haulage_truck_driver.  Modifies the underlying ontology.
     */
    public Haulage_truck_driver createHaulage_truck_driver(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_HAULAGE_TRUCK_DRIVER, DefaultHaulage_truck_driver.class);
    }

    /**
     * Gets an instance of type Haulage_truck_driver with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Haulage_truck_driver getHaulage_truck_driver(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_HAULAGE_TRUCK_DRIVER, DefaultHaulage_truck_driver.class);
    }

    /**
     * Gets all instances of Haulage_truck_driver from the ontology.
     */
    public Collection<? extends Haulage_truck_driver> getAllHaulage_truck_driverInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_HAULAGE_TRUCK_DRIVER, DefaultHaulage_truck_driver.class);
    }


    /* ***************************************************
     * Class http://owl.man.ac.uk/2006/07/sssw/people#haulage_worker
     */

    {
        javaMapping.add("http://owl.man.ac.uk/2006/07/sssw/people#haulage_worker", Haulage_worker.class, DefaultHaulage_worker.class);
    }

    /**
     * Creates an instance of type Haulage_worker.  Modifies the underlying ontology.
     */
    public Haulage_worker createHaulage_worker(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_HAULAGE_WORKER, DefaultHaulage_worker.class);
    }

    /**
     * Gets an instance of type Haulage_worker with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Haulage_worker getHaulage_worker(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_HAULAGE_WORKER, DefaultHaulage_worker.class);
    }

    /**
     * Gets all instances of Haulage_worker from the ontology.
     */
    public Collection<? extends Haulage_worker> getAllHaulage_workerInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_HAULAGE_WORKER, DefaultHaulage_worker.class);
    }


    /* ***************************************************
     * Class http://owl.man.ac.uk/2006/07/sssw/people#kid
     */

    {
        javaMapping.add("http://owl.man.ac.uk/2006/07/sssw/people#kid", Kid.class, DefaultKid.class);
    }

    /**
     * Creates an instance of type Kid.  Modifies the underlying ontology.
     */
    public Kid createKid(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_KID, DefaultKid.class);
    }

    /**
     * Gets an instance of type Kid with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Kid getKid(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_KID, DefaultKid.class);
    }

    /**
     * Gets all instances of Kid from the ontology.
     */
    public Collection<? extends Kid> getAllKidInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_KID, DefaultKid.class);
    }


    /* ***************************************************
     * Class http://owl.man.ac.uk/2006/07/sssw/people#leaf
     */

    {
        javaMapping.add("http://owl.man.ac.uk/2006/07/sssw/people#leaf", Leaf.class, DefaultLeaf.class);
    }

    /**
     * Creates an instance of type Leaf.  Modifies the underlying ontology.
     */
    public Leaf createLeaf(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_LEAF, DefaultLeaf.class);
    }

    /**
     * Gets an instance of type Leaf with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Leaf getLeaf(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_LEAF, DefaultLeaf.class);
    }

    /**
     * Gets all instances of Leaf from the ontology.
     */
    public Collection<? extends Leaf> getAllLeafInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_LEAF, DefaultLeaf.class);
    }


    /* ***************************************************
     * Class http://owl.man.ac.uk/2006/07/sssw/people#lorry
     */

    {
        javaMapping.add("http://owl.man.ac.uk/2006/07/sssw/people#lorry", Lorry.class, DefaultLorry.class);
    }

    /**
     * Creates an instance of type Lorry.  Modifies the underlying ontology.
     */
    public Lorry createLorry(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_LORRY, DefaultLorry.class);
    }

    /**
     * Gets an instance of type Lorry with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Lorry getLorry(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_LORRY, DefaultLorry.class);
    }

    /**
     * Gets all instances of Lorry from the ontology.
     */
    public Collection<? extends Lorry> getAllLorryInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_LORRY, DefaultLorry.class);
    }


    /* ***************************************************
     * Class http://owl.man.ac.uk/2006/07/sssw/people#lorry_driver
     */

    {
        javaMapping.add("http://owl.man.ac.uk/2006/07/sssw/people#lorry_driver", Lorry_driver.class, DefaultLorry_driver.class);
    }

    /**
     * Creates an instance of type Lorry_driver.  Modifies the underlying ontology.
     */
    public Lorry_driver createLorry_driver(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_LORRY_DRIVER, DefaultLorry_driver.class);
    }

    /**
     * Gets an instance of type Lorry_driver with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Lorry_driver getLorry_driver(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_LORRY_DRIVER, DefaultLorry_driver.class);
    }

    /**
     * Gets all instances of Lorry_driver from the ontology.
     */
    public Collection<? extends Lorry_driver> getAllLorry_driverInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_LORRY_DRIVER, DefaultLorry_driver.class);
    }


    /* ***************************************************
     * Class http://owl.man.ac.uk/2006/07/sssw/people#mad_cow
     */

    {
        javaMapping.add("http://owl.man.ac.uk/2006/07/sssw/people#mad_cow", Mad_cow.class, DefaultMad_cow.class);
    }

    /**
     * Creates an instance of type Mad_cow.  Modifies the underlying ontology.
     */
    public Mad_cow createMad_cow(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_MAD_COW, DefaultMad_cow.class);
    }

    /**
     * Gets an instance of type Mad_cow with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Mad_cow getMad_cow(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_MAD_COW, DefaultMad_cow.class);
    }

    /**
     * Gets all instances of Mad_cow from the ontology.
     */
    public Collection<? extends Mad_cow> getAllMad_cowInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_MAD_COW, DefaultMad_cow.class);
    }


    /* ***************************************************
     * Class http://owl.man.ac.uk/2006/07/sssw/people#magazine
     */

    {
        javaMapping.add("http://owl.man.ac.uk/2006/07/sssw/people#magazine", Magazine.class, DefaultMagazine.class);
    }

    /**
     * Creates an instance of type Magazine.  Modifies the underlying ontology.
     */
    public Magazine createMagazine(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_MAGAZINE, DefaultMagazine.class);
    }

    /**
     * Gets an instance of type Magazine with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Magazine getMagazine(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_MAGAZINE, DefaultMagazine.class);
    }

    /**
     * Gets all instances of Magazine from the ontology.
     */
    public Collection<? extends Magazine> getAllMagazineInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_MAGAZINE, DefaultMagazine.class);
    }


    /* ***************************************************
     * Class http://owl.man.ac.uk/2006/07/sssw/people#male
     */

    {
        javaMapping.add("http://owl.man.ac.uk/2006/07/sssw/people#male", Male.class, DefaultMale.class);
    }

    /**
     * Creates an instance of type Male.  Modifies the underlying ontology.
     */
    public Male createMale(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_MALE, DefaultMale.class);
    }

    /**
     * Gets an instance of type Male with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Male getMale(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_MALE, DefaultMale.class);
    }

    /**
     * Gets all instances of Male from the ontology.
     */
    public Collection<? extends Male> getAllMaleInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_MALE, DefaultMale.class);
    }


    /* ***************************************************
     * Class http://owl.man.ac.uk/2006/07/sssw/people#man
     */

    {
        javaMapping.add("http://owl.man.ac.uk/2006/07/sssw/people#man", Man.class, DefaultMan.class);
    }

    /**
     * Creates an instance of type Man.  Modifies the underlying ontology.
     */
    public Man createMan(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_MAN, DefaultMan.class);
    }

    /**
     * Gets an instance of type Man with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Man getMan(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_MAN, DefaultMan.class);
    }

    /**
     * Gets all instances of Man from the ontology.
     */
    public Collection<? extends Man> getAllManInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_MAN, DefaultMan.class);
    }


    /* ***************************************************
     * Class http://owl.man.ac.uk/2006/07/sssw/people#newspaper
     */

    {
        javaMapping.add("http://owl.man.ac.uk/2006/07/sssw/people#newspaper", Newspaper.class, DefaultNewspaper.class);
    }

    /**
     * Creates an instance of type Newspaper.  Modifies the underlying ontology.
     */
    public Newspaper createNewspaper(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_NEWSPAPER, DefaultNewspaper.class);
    }

    /**
     * Gets an instance of type Newspaper with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Newspaper getNewspaper(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_NEWSPAPER, DefaultNewspaper.class);
    }

    /**
     * Gets all instances of Newspaper from the ontology.
     */
    public Collection<? extends Newspaper> getAllNewspaperInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_NEWSPAPER, DefaultNewspaper.class);
    }


    /* ***************************************************
     * Class http://owl.man.ac.uk/2006/07/sssw/people#old_lady
     */

    {
        javaMapping.add("http://owl.man.ac.uk/2006/07/sssw/people#old_lady", Old_lady.class, DefaultOld_lady.class);
    }

    /**
     * Creates an instance of type Old_lady.  Modifies the underlying ontology.
     */
    public Old_lady createOld_lady(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_OLD_LADY, DefaultOld_lady.class);
    }

    /**
     * Gets an instance of type Old_lady with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Old_lady getOld_lady(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_OLD_LADY, DefaultOld_lady.class);
    }

    /**
     * Gets all instances of Old_lady from the ontology.
     */
    public Collection<? extends Old_lady> getAllOld_ladyInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_OLD_LADY, DefaultOld_lady.class);
    }


    /* ***************************************************
     * Class http://owl.man.ac.uk/2006/07/sssw/people#person
     */

    {
        javaMapping.add("http://owl.man.ac.uk/2006/07/sssw/people#person", Person.class, DefaultPerson.class);
    }

    /**
     * Creates an instance of type Person.  Modifies the underlying ontology.
     */
    public Person createPerson(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_PERSON, DefaultPerson.class);
    }

    /**
     * Gets an instance of type Person with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Person getPerson(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_PERSON, DefaultPerson.class);
    }

    /**
     * Gets all instances of Person from the ontology.
     */
    public Collection<? extends Person> getAllPersonInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_PERSON, DefaultPerson.class);
    }


    /* ***************************************************
     * Class http://owl.man.ac.uk/2006/07/sssw/people#pet
     */

    {
        javaMapping.add("http://owl.man.ac.uk/2006/07/sssw/people#pet", Pet.class, DefaultPet.class);
    }

    /**
     * Creates an instance of type Pet.  Modifies the underlying ontology.
     */
    public Pet createPet(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_PET, DefaultPet.class);
    }

    /**
     * Gets an instance of type Pet with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Pet getPet(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_PET, DefaultPet.class);
    }

    /**
     * Gets all instances of Pet from the ontology.
     */
    public Collection<? extends Pet> getAllPetInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_PET, DefaultPet.class);
    }


    /* ***************************************************
     * Class http://owl.man.ac.uk/2006/07/sssw/people#pet_owner
     */

    {
        javaMapping.add("http://owl.man.ac.uk/2006/07/sssw/people#pet_owner", Pet_owner.class, DefaultPet_owner.class);
    }

    /**
     * Creates an instance of type Pet_owner.  Modifies the underlying ontology.
     */
    public Pet_owner createPet_owner(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_PET_OWNER, DefaultPet_owner.class);
    }

    /**
     * Gets an instance of type Pet_owner with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Pet_owner getPet_owner(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_PET_OWNER, DefaultPet_owner.class);
    }

    /**
     * Gets all instances of Pet_owner from the ontology.
     */
    public Collection<? extends Pet_owner> getAllPet_ownerInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_PET_OWNER, DefaultPet_owner.class);
    }


    /* ***************************************************
     * Class http://owl.man.ac.uk/2006/07/sssw/people#plant
     */

    {
        javaMapping.add("http://owl.man.ac.uk/2006/07/sssw/people#plant", Plant.class, DefaultPlant.class);
    }

    /**
     * Creates an instance of type Plant.  Modifies the underlying ontology.
     */
    public Plant createPlant(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_PLANT, DefaultPlant.class);
    }

    /**
     * Gets an instance of type Plant with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Plant getPlant(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_PLANT, DefaultPlant.class);
    }

    /**
     * Gets all instances of Plant from the ontology.
     */
    public Collection<? extends Plant> getAllPlantInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_PLANT, DefaultPlant.class);
    }


    /* ***************************************************
     * Class http://owl.man.ac.uk/2006/07/sssw/people#publication
     */

    {
        javaMapping.add("http://owl.man.ac.uk/2006/07/sssw/people#publication", Publication.class, DefaultPublication.class);
    }

    /**
     * Creates an instance of type Publication.  Modifies the underlying ontology.
     */
    public Publication createPublication(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_PUBLICATION, DefaultPublication.class);
    }

    /**
     * Gets an instance of type Publication with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Publication getPublication(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_PUBLICATION, DefaultPublication.class);
    }

    /**
     * Gets all instances of Publication from the ontology.
     */
    public Collection<? extends Publication> getAllPublicationInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_PUBLICATION, DefaultPublication.class);
    }


    /* ***************************************************
     * Class http://owl.man.ac.uk/2006/07/sssw/people#quality_broadsheet
     */

    {
        javaMapping.add("http://owl.man.ac.uk/2006/07/sssw/people#quality_broadsheet", Quality_broadsheet.class, DefaultQuality_broadsheet.class);
    }

    /**
     * Creates an instance of type Quality_broadsheet.  Modifies the underlying ontology.
     */
    public Quality_broadsheet createQuality_broadsheet(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_QUALITY_BROADSHEET, DefaultQuality_broadsheet.class);
    }

    /**
     * Gets an instance of type Quality_broadsheet with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Quality_broadsheet getQuality_broadsheet(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_QUALITY_BROADSHEET, DefaultQuality_broadsheet.class);
    }

    /**
     * Gets all instances of Quality_broadsheet from the ontology.
     */
    public Collection<? extends Quality_broadsheet> getAllQuality_broadsheetInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_QUALITY_BROADSHEET, DefaultQuality_broadsheet.class);
    }


    /* ***************************************************
     * Class http://owl.man.ac.uk/2006/07/sssw/people#red_top
     */

    {
        javaMapping.add("http://owl.man.ac.uk/2006/07/sssw/people#red_top", Red_top.class, DefaultRed_top.class);
    }

    /**
     * Creates an instance of type Red_top.  Modifies the underlying ontology.
     */
    public Red_top createRed_top(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_RED_TOP, DefaultRed_top.class);
    }

    /**
     * Gets an instance of type Red_top with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Red_top getRed_top(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_RED_TOP, DefaultRed_top.class);
    }

    /**
     * Gets all instances of Red_top from the ontology.
     */
    public Collection<? extends Red_top> getAllRed_topInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_RED_TOP, DefaultRed_top.class);
    }


    /* ***************************************************
     * Class http://owl.man.ac.uk/2006/07/sssw/people#sheep
     */

    {
        javaMapping.add("http://owl.man.ac.uk/2006/07/sssw/people#sheep", Sheep.class, DefaultSheep.class);
    }

    /**
     * Creates an instance of type Sheep.  Modifies the underlying ontology.
     */
    public Sheep createSheep(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_SHEEP, DefaultSheep.class);
    }

    /**
     * Gets an instance of type Sheep with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Sheep getSheep(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_SHEEP, DefaultSheep.class);
    }

    /**
     * Gets all instances of Sheep from the ontology.
     */
    public Collection<? extends Sheep> getAllSheepInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_SHEEP, DefaultSheep.class);
    }


    /* ***************************************************
     * Class http://owl.man.ac.uk/2006/07/sssw/people#tabloid
     */

    {
        javaMapping.add("http://owl.man.ac.uk/2006/07/sssw/people#tabloid", Tabloid.class, DefaultTabloid.class);
    }

    /**
     * Creates an instance of type Tabloid.  Modifies the underlying ontology.
     */
    public Tabloid createTabloid(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_TABLOID, DefaultTabloid.class);
    }

    /**
     * Gets an instance of type Tabloid with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Tabloid getTabloid(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_TABLOID, DefaultTabloid.class);
    }

    /**
     * Gets all instances of Tabloid from the ontology.
     */
    public Collection<? extends Tabloid> getAllTabloidInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_TABLOID, DefaultTabloid.class);
    }


    /* ***************************************************
     * Class http://owl.man.ac.uk/2006/07/sssw/people#tiger
     */

    {
        javaMapping.add("http://owl.man.ac.uk/2006/07/sssw/people#tiger", Tiger.class, DefaultTiger.class);
    }

    /**
     * Creates an instance of type Tiger.  Modifies the underlying ontology.
     */
    public Tiger createTiger(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_TIGER, DefaultTiger.class);
    }

    /**
     * Gets an instance of type Tiger with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Tiger getTiger(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_TIGER, DefaultTiger.class);
    }

    /**
     * Gets all instances of Tiger from the ontology.
     */
    public Collection<? extends Tiger> getAllTigerInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_TIGER, DefaultTiger.class);
    }


    /* ***************************************************
     * Class http://owl.man.ac.uk/2006/07/sssw/people#tree
     */

    {
        javaMapping.add("http://owl.man.ac.uk/2006/07/sssw/people#tree", Tree.class, DefaultTree.class);
    }

    /**
     * Creates an instance of type Tree.  Modifies the underlying ontology.
     */
    public Tree createTree(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_TREE, DefaultTree.class);
    }

    /**
     * Gets an instance of type Tree with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Tree getTree(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_TREE, DefaultTree.class);
    }

    /**
     * Gets all instances of Tree from the ontology.
     */
    public Collection<? extends Tree> getAllTreeInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_TREE, DefaultTree.class);
    }


    /* ***************************************************
     * Class http://owl.man.ac.uk/2006/07/sssw/people#truck
     */

    {
        javaMapping.add("http://owl.man.ac.uk/2006/07/sssw/people#truck", Truck.class, DefaultTruck.class);
    }

    /**
     * Creates an instance of type Truck.  Modifies the underlying ontology.
     */
    public Truck createTruck(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_TRUCK, DefaultTruck.class);
    }

    /**
     * Gets an instance of type Truck with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Truck getTruck(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_TRUCK, DefaultTruck.class);
    }

    /**
     * Gets all instances of Truck from the ontology.
     */
    public Collection<? extends Truck> getAllTruckInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_TRUCK, DefaultTruck.class);
    }


    /* ***************************************************
     * Class http://owl.man.ac.uk/2006/07/sssw/people#van
     */

    {
        javaMapping.add("http://owl.man.ac.uk/2006/07/sssw/people#van", Van.class, DefaultVan.class);
    }

    /**
     * Creates an instance of type Van.  Modifies the underlying ontology.
     */
    public Van createVan(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_VAN, DefaultVan.class);
    }

    /**
     * Gets an instance of type Van with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Van getVan(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_VAN, DefaultVan.class);
    }

    /**
     * Gets all instances of Van from the ontology.
     */
    public Collection<? extends Van> getAllVanInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_VAN, DefaultVan.class);
    }


    /* ***************************************************
     * Class http://owl.man.ac.uk/2006/07/sssw/people#van_driver
     */

    {
        javaMapping.add("http://owl.man.ac.uk/2006/07/sssw/people#van_driver", Van_driver.class, DefaultVan_driver.class);
    }

    /**
     * Creates an instance of type Van_driver.  Modifies the underlying ontology.
     */
    public Van_driver createVan_driver(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_VAN_DRIVER, DefaultVan_driver.class);
    }

    /**
     * Gets an instance of type Van_driver with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Van_driver getVan_driver(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_VAN_DRIVER, DefaultVan_driver.class);
    }

    /**
     * Gets all instances of Van_driver from the ontology.
     */
    public Collection<? extends Van_driver> getAllVan_driverInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_VAN_DRIVER, DefaultVan_driver.class);
    }


    /* ***************************************************
     * Class http://owl.man.ac.uk/2006/07/sssw/people#vegetarian
     */

    {
        javaMapping.add("http://owl.man.ac.uk/2006/07/sssw/people#vegetarian", Vegetarian.class, DefaultVegetarian.class);
    }

    /**
     * Creates an instance of type Vegetarian.  Modifies the underlying ontology.
     */
    public Vegetarian createVegetarian(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_VEGETARIAN, DefaultVegetarian.class);
    }

    /**
     * Gets an instance of type Vegetarian with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Vegetarian getVegetarian(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_VEGETARIAN, DefaultVegetarian.class);
    }

    /**
     * Gets all instances of Vegetarian from the ontology.
     */
    public Collection<? extends Vegetarian> getAllVegetarianInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_VEGETARIAN, DefaultVegetarian.class);
    }


    /* ***************************************************
     * Class http://owl.man.ac.uk/2006/07/sssw/people#vehicle
     */

    {
        javaMapping.add("http://owl.man.ac.uk/2006/07/sssw/people#vehicle", Vehicle.class, DefaultVehicle.class);
    }

    /**
     * Creates an instance of type Vehicle.  Modifies the underlying ontology.
     */
    public Vehicle createVehicle(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_VEHICLE, DefaultVehicle.class);
    }

    /**
     * Gets an instance of type Vehicle with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Vehicle getVehicle(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_VEHICLE, DefaultVehicle.class);
    }

    /**
     * Gets all instances of Vehicle from the ontology.
     */
    public Collection<? extends Vehicle> getAllVehicleInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_VEHICLE, DefaultVehicle.class);
    }


    /* ***************************************************
     * Class http://owl.man.ac.uk/2006/07/sssw/people#white_thing
     */

    {
        javaMapping.add("http://owl.man.ac.uk/2006/07/sssw/people#white_thing", White_thing.class, DefaultWhite_thing.class);
    }

    /**
     * Creates an instance of type White_thing.  Modifies the underlying ontology.
     */
    public White_thing createWhite_thing(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_WHITE_THING, DefaultWhite_thing.class);
    }

    /**
     * Gets an instance of type White_thing with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public White_thing getWhite_thing(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_WHITE_THING, DefaultWhite_thing.class);
    }

    /**
     * Gets all instances of White_thing from the ontology.
     */
    public Collection<? extends White_thing> getAllWhite_thingInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_WHITE_THING, DefaultWhite_thing.class);
    }


    /* ***************************************************
     * Class http://owl.man.ac.uk/2006/07/sssw/people#white_van_man
     */

    {
        javaMapping.add("http://owl.man.ac.uk/2006/07/sssw/people#white_van_man", White_van_man.class, DefaultWhite_van_man.class);
    }

    /**
     * Creates an instance of type White_van_man.  Modifies the underlying ontology.
     */
    public White_van_man createWhite_van_man(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_WHITE_VAN_MAN, DefaultWhite_van_man.class);
    }

    /**
     * Gets an instance of type White_van_man with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public White_van_man getWhite_van_man(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_WHITE_VAN_MAN, DefaultWhite_van_man.class);
    }

    /**
     * Gets all instances of White_van_man from the ontology.
     */
    public Collection<? extends White_van_man> getAllWhite_van_manInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_WHITE_VAN_MAN, DefaultWhite_van_man.class);
    }


    /* ***************************************************
     * Class http://owl.man.ac.uk/2006/07/sssw/people#woman
     */

    {
        javaMapping.add("http://owl.man.ac.uk/2006/07/sssw/people#woman", Woman.class, DefaultWoman.class);
    }

    /**
     * Creates an instance of type Woman.  Modifies the underlying ontology.
     */
    public Woman createWoman(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_WOMAN, DefaultWoman.class);
    }

    /**
     * Gets an instance of type Woman with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Woman getWoman(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_WOMAN, DefaultWoman.class);
    }

    /**
     * Gets all instances of Woman from the ontology.
     */
    public Collection<? extends Woman> getAllWomanInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_WOMAN, DefaultWoman.class);
    }


    /* ***************************************************
     * Class http://owl.man.ac.uk/2006/07/sssw/people#young
     */

    {
        javaMapping.add("http://owl.man.ac.uk/2006/07/sssw/people#young", Young.class, DefaultYoung.class);
    }

    /**
     * Creates an instance of type Young.  Modifies the underlying ontology.
     */
    public Young createYoung(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_YOUNG, DefaultYoung.class);
    }

    /**
     * Gets an instance of type Young with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Young getYoung(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_YOUNG, DefaultYoung.class);
    }

    /**
     * Gets all instances of Young from the ontology.
     */
    public Collection<? extends Young> getAllYoungInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_YOUNG, DefaultYoung.class);
    }


}
