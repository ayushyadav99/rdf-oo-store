package travel;

import travel.impl.*;


import java.util.Collection;

import org.protege.owl.codegeneration.CodeGenerationFactory;
import org.protege.owl.codegeneration.WrappedIndividual;
import org.protege.owl.codegeneration.impl.FactoryHelper;
import org.protege.owl.codegeneration.impl.ProtegeJavaMapping;
import org.protege.owl.codegeneration.inference.CodeGenerationInference;
import org.protege.owl.codegeneration.inference.SimpleInference;

import org.semanticweb.owlapi.model.OWLClass;
import org.semanticweb.owlapi.model.OWLOntology;
import org.semanticweb.owlapi.model.OWLOntologyStorageException;

/**
 * A class that serves as the entry point to the generated code providing access
 * to existing individuals in the ontology and the ability to create new individuals in the ontology.<p>
 * 
 * Generated by Protege (http://protege.stanford.edu).<br>
 * Source Class: MyFactory<br>
 * @version generated on Sun May 16 18:22:29 IST 2021 by ayushyadav
 */
public class MyFactory implements CodeGenerationFactory {
    private OWLOntology ontology;
    private ProtegeJavaMapping javaMapping = new ProtegeJavaMapping();
    private FactoryHelper delegate;
    private CodeGenerationInference inference;

    public MyFactory(OWLOntology ontology) {
	    this(ontology, new SimpleInference(ontology));
    }
    
    public MyFactory(OWLOntology ontology, CodeGenerationInference inference) {
        this.ontology = ontology;
        this.inference = inference;
        javaMapping.initialize(ontology, inference);
        delegate = new FactoryHelper(ontology, inference);
    }

    public OWLOntology getOwlOntology() {
        return ontology;
    }
    
    public void saveOwlOntology() throws OWLOntologyStorageException {
        ontology.getOWLOntologyManager().saveOntology(ontology);
    }
    
    public void flushOwlReasoner() {
        delegate.flushOwlReasoner();
    }
    
    public boolean canAs(WrappedIndividual resource, Class<? extends WrappedIndividual> javaInterface) {
    	return javaMapping.canAs(resource, javaInterface);
    }
    
    public  <X extends WrappedIndividual> X as(WrappedIndividual resource, Class<? extends X> javaInterface) {
    	return javaMapping.as(resource, javaInterface);
    }
    
    public Class<?> getJavaInterfaceFromOwlClass(OWLClass cls) {
        return javaMapping.getJavaInterfaceFromOwlClass(cls);
    }
    
    public OWLClass getOwlClassFromJavaInterface(Class<?> javaInterface) {
	    return javaMapping.getOwlClassFromJavaInterface(javaInterface);
    }
    
    public CodeGenerationInference getInference() {
        return inference;
    }

    /* ***************************************************
     * Class http://www.owl-ontologies.com/travel.owl#Accommodation
     */

    {
        javaMapping.add("http://www.owl-ontologies.com/travel.owl#Accommodation", Accommodation.class, DefaultAccommodation.class);
    }

    /**
     * Creates an instance of type Accommodation.  Modifies the underlying ontology.
     */
    public Accommodation createAccommodation(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_ACCOMMODATION, DefaultAccommodation.class);
    }

    /**
     * Gets an instance of type Accommodation with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Accommodation getAccommodation(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_ACCOMMODATION, DefaultAccommodation.class);
    }

    /**
     * Gets all instances of Accommodation from the ontology.
     */
    public Collection<? extends Accommodation> getAllAccommodationInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_ACCOMMODATION, DefaultAccommodation.class);
    }


    /* ***************************************************
     * Class http://www.owl-ontologies.com/travel.owl#AccommodationRating
     */

    {
        javaMapping.add("http://www.owl-ontologies.com/travel.owl#AccommodationRating", AccommodationRating.class, DefaultAccommodationRating.class);
    }

    /**
     * Creates an instance of type AccommodationRating.  Modifies the underlying ontology.
     */
    public AccommodationRating createAccommodationRating(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_ACCOMMODATIONRATING, DefaultAccommodationRating.class);
    }

    /**
     * Gets an instance of type AccommodationRating with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public AccommodationRating getAccommodationRating(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_ACCOMMODATIONRATING, DefaultAccommodationRating.class);
    }

    /**
     * Gets all instances of AccommodationRating from the ontology.
     */
    public Collection<? extends AccommodationRating> getAllAccommodationRatingInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_ACCOMMODATIONRATING, DefaultAccommodationRating.class);
    }


    /* ***************************************************
     * Class http://www.owl-ontologies.com/travel.owl#Activity
     */

    {
        javaMapping.add("http://www.owl-ontologies.com/travel.owl#Activity", Activity.class, DefaultActivity.class);
    }

    /**
     * Creates an instance of type Activity.  Modifies the underlying ontology.
     */
    public Activity createActivity(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_ACTIVITY, DefaultActivity.class);
    }

    /**
     * Gets an instance of type Activity with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Activity getActivity(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_ACTIVITY, DefaultActivity.class);
    }

    /**
     * Gets all instances of Activity from the ontology.
     */
    public Collection<? extends Activity> getAllActivityInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_ACTIVITY, DefaultActivity.class);
    }


    /* ***************************************************
     * Class http://www.owl-ontologies.com/travel.owl#Adventure
     */

    {
        javaMapping.add("http://www.owl-ontologies.com/travel.owl#Adventure", Adventure.class, DefaultAdventure.class);
    }

    /**
     * Creates an instance of type Adventure.  Modifies the underlying ontology.
     */
    public Adventure createAdventure(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_ADVENTURE, DefaultAdventure.class);
    }

    /**
     * Gets an instance of type Adventure with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Adventure getAdventure(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_ADVENTURE, DefaultAdventure.class);
    }

    /**
     * Gets all instances of Adventure from the ontology.
     */
    public Collection<? extends Adventure> getAllAdventureInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_ADVENTURE, DefaultAdventure.class);
    }


    /* ***************************************************
     * Class http://www.owl-ontologies.com/travel.owl#BackpackersDestination
     */

    {
        javaMapping.add("http://www.owl-ontologies.com/travel.owl#BackpackersDestination", BackpackersDestination.class, DefaultBackpackersDestination.class);
    }

    /**
     * Creates an instance of type BackpackersDestination.  Modifies the underlying ontology.
     */
    public BackpackersDestination createBackpackersDestination(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_BACKPACKERSDESTINATION, DefaultBackpackersDestination.class);
    }

    /**
     * Gets an instance of type BackpackersDestination with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public BackpackersDestination getBackpackersDestination(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_BACKPACKERSDESTINATION, DefaultBackpackersDestination.class);
    }

    /**
     * Gets all instances of BackpackersDestination from the ontology.
     */
    public Collection<? extends BackpackersDestination> getAllBackpackersDestinationInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_BACKPACKERSDESTINATION, DefaultBackpackersDestination.class);
    }


    /* ***************************************************
     * Class http://www.owl-ontologies.com/travel.owl#Beach
     */

    {
        javaMapping.add("http://www.owl-ontologies.com/travel.owl#Beach", Beach.class, DefaultBeach.class);
    }

    /**
     * Creates an instance of type Beach.  Modifies the underlying ontology.
     */
    public Beach createBeach(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_BEACH, DefaultBeach.class);
    }

    /**
     * Gets an instance of type Beach with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Beach getBeach(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_BEACH, DefaultBeach.class);
    }

    /**
     * Gets all instances of Beach from the ontology.
     */
    public Collection<? extends Beach> getAllBeachInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_BEACH, DefaultBeach.class);
    }


    /* ***************************************************
     * Class http://www.owl-ontologies.com/travel.owl#BedAndBreakfast
     */

    {
        javaMapping.add("http://www.owl-ontologies.com/travel.owl#BedAndBreakfast", BedAndBreakfast.class, DefaultBedAndBreakfast.class);
    }

    /**
     * Creates an instance of type BedAndBreakfast.  Modifies the underlying ontology.
     */
    public BedAndBreakfast createBedAndBreakfast(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_BEDANDBREAKFAST, DefaultBedAndBreakfast.class);
    }

    /**
     * Gets an instance of type BedAndBreakfast with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public BedAndBreakfast getBedAndBreakfast(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_BEDANDBREAKFAST, DefaultBedAndBreakfast.class);
    }

    /**
     * Gets all instances of BedAndBreakfast from the ontology.
     */
    public Collection<? extends BedAndBreakfast> getAllBedAndBreakfastInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_BEDANDBREAKFAST, DefaultBedAndBreakfast.class);
    }


    /* ***************************************************
     * Class http://www.owl-ontologies.com/travel.owl#BudgetAccommodation
     */

    {
        javaMapping.add("http://www.owl-ontologies.com/travel.owl#BudgetAccommodation", BudgetAccommodation.class, DefaultBudgetAccommodation.class);
    }

    /**
     * Creates an instance of type BudgetAccommodation.  Modifies the underlying ontology.
     */
    public BudgetAccommodation createBudgetAccommodation(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_BUDGETACCOMMODATION, DefaultBudgetAccommodation.class);
    }

    /**
     * Gets an instance of type BudgetAccommodation with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public BudgetAccommodation getBudgetAccommodation(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_BUDGETACCOMMODATION, DefaultBudgetAccommodation.class);
    }

    /**
     * Gets all instances of BudgetAccommodation from the ontology.
     */
    public Collection<? extends BudgetAccommodation> getAllBudgetAccommodationInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_BUDGETACCOMMODATION, DefaultBudgetAccommodation.class);
    }


    /* ***************************************************
     * Class http://www.owl-ontologies.com/travel.owl#BudgetHotelDestination
     */

    {
        javaMapping.add("http://www.owl-ontologies.com/travel.owl#BudgetHotelDestination", BudgetHotelDestination.class, DefaultBudgetHotelDestination.class);
    }

    /**
     * Creates an instance of type BudgetHotelDestination.  Modifies the underlying ontology.
     */
    public BudgetHotelDestination createBudgetHotelDestination(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_BUDGETHOTELDESTINATION, DefaultBudgetHotelDestination.class);
    }

    /**
     * Gets an instance of type BudgetHotelDestination with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public BudgetHotelDestination getBudgetHotelDestination(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_BUDGETHOTELDESTINATION, DefaultBudgetHotelDestination.class);
    }

    /**
     * Gets all instances of BudgetHotelDestination from the ontology.
     */
    public Collection<? extends BudgetHotelDestination> getAllBudgetHotelDestinationInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_BUDGETHOTELDESTINATION, DefaultBudgetHotelDestination.class);
    }


    /* ***************************************************
     * Class http://www.owl-ontologies.com/travel.owl#BunjeeJumping
     */

    {
        javaMapping.add("http://www.owl-ontologies.com/travel.owl#BunjeeJumping", BunjeeJumping.class, DefaultBunjeeJumping.class);
    }

    /**
     * Creates an instance of type BunjeeJumping.  Modifies the underlying ontology.
     */
    public BunjeeJumping createBunjeeJumping(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_BUNJEEJUMPING, DefaultBunjeeJumping.class);
    }

    /**
     * Gets an instance of type BunjeeJumping with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public BunjeeJumping getBunjeeJumping(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_BUNJEEJUMPING, DefaultBunjeeJumping.class);
    }

    /**
     * Gets all instances of BunjeeJumping from the ontology.
     */
    public Collection<? extends BunjeeJumping> getAllBunjeeJumpingInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_BUNJEEJUMPING, DefaultBunjeeJumping.class);
    }


    /* ***************************************************
     * Class http://www.owl-ontologies.com/travel.owl#Campground
     */

    {
        javaMapping.add("http://www.owl-ontologies.com/travel.owl#Campground", Campground.class, DefaultCampground.class);
    }

    /**
     * Creates an instance of type Campground.  Modifies the underlying ontology.
     */
    public Campground createCampground(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_CAMPGROUND, DefaultCampground.class);
    }

    /**
     * Gets an instance of type Campground with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Campground getCampground(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_CAMPGROUND, DefaultCampground.class);
    }

    /**
     * Gets all instances of Campground from the ontology.
     */
    public Collection<? extends Campground> getAllCampgroundInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_CAMPGROUND, DefaultCampground.class);
    }


    /* ***************************************************
     * Class http://www.owl-ontologies.com/travel.owl#Capital
     */

    {
        javaMapping.add("http://www.owl-ontologies.com/travel.owl#Capital", Capital.class, DefaultCapital.class);
    }

    /**
     * Creates an instance of type Capital.  Modifies the underlying ontology.
     */
    public Capital createCapital(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_CAPITAL, DefaultCapital.class);
    }

    /**
     * Gets an instance of type Capital with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Capital getCapital(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_CAPITAL, DefaultCapital.class);
    }

    /**
     * Gets all instances of Capital from the ontology.
     */
    public Collection<? extends Capital> getAllCapitalInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_CAPITAL, DefaultCapital.class);
    }


    /* ***************************************************
     * Class http://www.owl-ontologies.com/travel.owl#City
     */

    {
        javaMapping.add("http://www.owl-ontologies.com/travel.owl#City", City.class, DefaultCity.class);
    }

    /**
     * Creates an instance of type City.  Modifies the underlying ontology.
     */
    public City createCity(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_CITY, DefaultCity.class);
    }

    /**
     * Gets an instance of type City with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public City getCity(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_CITY, DefaultCity.class);
    }

    /**
     * Gets all instances of City from the ontology.
     */
    public Collection<? extends City> getAllCityInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_CITY, DefaultCity.class);
    }


    /* ***************************************************
     * Class http://www.owl-ontologies.com/travel.owl#Contact
     */

    {
        javaMapping.add("http://www.owl-ontologies.com/travel.owl#Contact", Contact.class, DefaultContact.class);
    }

    /**
     * Creates an instance of type Contact.  Modifies the underlying ontology.
     */
    public Contact createContact(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_CONTACT, DefaultContact.class);
    }

    /**
     * Gets an instance of type Contact with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Contact getContact(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_CONTACT, DefaultContact.class);
    }

    /**
     * Gets all instances of Contact from the ontology.
     */
    public Collection<? extends Contact> getAllContactInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_CONTACT, DefaultContact.class);
    }


    /* ***************************************************
     * Class http://www.owl-ontologies.com/travel.owl#Destination
     */

    {
        javaMapping.add("http://www.owl-ontologies.com/travel.owl#Destination", Destination.class, DefaultDestination.class);
    }

    /**
     * Creates an instance of type Destination.  Modifies the underlying ontology.
     */
    public Destination createDestination(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_DESTINATION, DefaultDestination.class);
    }

    /**
     * Gets an instance of type Destination with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Destination getDestination(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_DESTINATION, DefaultDestination.class);
    }

    /**
     * Gets all instances of Destination from the ontology.
     */
    public Collection<? extends Destination> getAllDestinationInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_DESTINATION, DefaultDestination.class);
    }


    /* ***************************************************
     * Class http://www.owl-ontologies.com/travel.owl#FamilyDestination
     */

    {
        javaMapping.add("http://www.owl-ontologies.com/travel.owl#FamilyDestination", FamilyDestination.class, DefaultFamilyDestination.class);
    }

    /**
     * Creates an instance of type FamilyDestination.  Modifies the underlying ontology.
     */
    public FamilyDestination createFamilyDestination(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_FAMILYDESTINATION, DefaultFamilyDestination.class);
    }

    /**
     * Gets an instance of type FamilyDestination with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public FamilyDestination getFamilyDestination(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_FAMILYDESTINATION, DefaultFamilyDestination.class);
    }

    /**
     * Gets all instances of FamilyDestination from the ontology.
     */
    public Collection<? extends FamilyDestination> getAllFamilyDestinationInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_FAMILYDESTINATION, DefaultFamilyDestination.class);
    }


    /* ***************************************************
     * Class http://www.owl-ontologies.com/travel.owl#Farmland
     */

    {
        javaMapping.add("http://www.owl-ontologies.com/travel.owl#Farmland", Farmland.class, DefaultFarmland.class);
    }

    /**
     * Creates an instance of type Farmland.  Modifies the underlying ontology.
     */
    public Farmland createFarmland(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_FARMLAND, DefaultFarmland.class);
    }

    /**
     * Gets an instance of type Farmland with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Farmland getFarmland(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_FARMLAND, DefaultFarmland.class);
    }

    /**
     * Gets all instances of Farmland from the ontology.
     */
    public Collection<? extends Farmland> getAllFarmlandInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_FARMLAND, DefaultFarmland.class);
    }


    /* ***************************************************
     * Class http://www.owl-ontologies.com/travel.owl#Hiking
     */

    {
        javaMapping.add("http://www.owl-ontologies.com/travel.owl#Hiking", Hiking.class, DefaultHiking.class);
    }

    /**
     * Creates an instance of type Hiking.  Modifies the underlying ontology.
     */
    public Hiking createHiking(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_HIKING, DefaultHiking.class);
    }

    /**
     * Gets an instance of type Hiking with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Hiking getHiking(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_HIKING, DefaultHiking.class);
    }

    /**
     * Gets all instances of Hiking from the ontology.
     */
    public Collection<? extends Hiking> getAllHikingInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_HIKING, DefaultHiking.class);
    }


    /* ***************************************************
     * Class http://www.owl-ontologies.com/travel.owl#Hotel
     */

    {
        javaMapping.add("http://www.owl-ontologies.com/travel.owl#Hotel", Hotel.class, DefaultHotel.class);
    }

    /**
     * Creates an instance of type Hotel.  Modifies the underlying ontology.
     */
    public Hotel createHotel(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_HOTEL, DefaultHotel.class);
    }

    /**
     * Gets an instance of type Hotel with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Hotel getHotel(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_HOTEL, DefaultHotel.class);
    }

    /**
     * Gets all instances of Hotel from the ontology.
     */
    public Collection<? extends Hotel> getAllHotelInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_HOTEL, DefaultHotel.class);
    }


    /* ***************************************************
     * Class http://www.owl-ontologies.com/travel.owl#LuxuryHotel
     */

    {
        javaMapping.add("http://www.owl-ontologies.com/travel.owl#LuxuryHotel", LuxuryHotel.class, DefaultLuxuryHotel.class);
    }

    /**
     * Creates an instance of type LuxuryHotel.  Modifies the underlying ontology.
     */
    public LuxuryHotel createLuxuryHotel(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_LUXURYHOTEL, DefaultLuxuryHotel.class);
    }

    /**
     * Gets an instance of type LuxuryHotel with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public LuxuryHotel getLuxuryHotel(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_LUXURYHOTEL, DefaultLuxuryHotel.class);
    }

    /**
     * Gets all instances of LuxuryHotel from the ontology.
     */
    public Collection<? extends LuxuryHotel> getAllLuxuryHotelInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_LUXURYHOTEL, DefaultLuxuryHotel.class);
    }


    /* ***************************************************
     * Class http://www.owl-ontologies.com/travel.owl#Museums
     */

    {
        javaMapping.add("http://www.owl-ontologies.com/travel.owl#Museums", Museums.class, DefaultMuseums.class);
    }

    /**
     * Creates an instance of type Museums.  Modifies the underlying ontology.
     */
    public Museums createMuseums(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_MUSEUMS, DefaultMuseums.class);
    }

    /**
     * Gets an instance of type Museums with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Museums getMuseums(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_MUSEUMS, DefaultMuseums.class);
    }

    /**
     * Gets all instances of Museums from the ontology.
     */
    public Collection<? extends Museums> getAllMuseumsInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_MUSEUMS, DefaultMuseums.class);
    }


    /* ***************************************************
     * Class http://www.owl-ontologies.com/travel.owl#NationalPark
     */

    {
        javaMapping.add("http://www.owl-ontologies.com/travel.owl#NationalPark", NationalPark.class, DefaultNationalPark.class);
    }

    /**
     * Creates an instance of type NationalPark.  Modifies the underlying ontology.
     */
    public NationalPark createNationalPark(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_NATIONALPARK, DefaultNationalPark.class);
    }

    /**
     * Gets an instance of type NationalPark with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public NationalPark getNationalPark(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_NATIONALPARK, DefaultNationalPark.class);
    }

    /**
     * Gets all instances of NationalPark from the ontology.
     */
    public Collection<? extends NationalPark> getAllNationalParkInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_NATIONALPARK, DefaultNationalPark.class);
    }


    /* ***************************************************
     * Class http://www.owl-ontologies.com/travel.owl#QuietDestination
     */

    {
        javaMapping.add("http://www.owl-ontologies.com/travel.owl#QuietDestination", QuietDestination.class, DefaultQuietDestination.class);
    }

    /**
     * Creates an instance of type QuietDestination.  Modifies the underlying ontology.
     */
    public QuietDestination createQuietDestination(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_QUIETDESTINATION, DefaultQuietDestination.class);
    }

    /**
     * Gets an instance of type QuietDestination with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public QuietDestination getQuietDestination(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_QUIETDESTINATION, DefaultQuietDestination.class);
    }

    /**
     * Gets all instances of QuietDestination from the ontology.
     */
    public Collection<? extends QuietDestination> getAllQuietDestinationInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_QUIETDESTINATION, DefaultQuietDestination.class);
    }


    /* ***************************************************
     * Class http://www.owl-ontologies.com/travel.owl#Relaxation
     */

    {
        javaMapping.add("http://www.owl-ontologies.com/travel.owl#Relaxation", Relaxation.class, DefaultRelaxation.class);
    }

    /**
     * Creates an instance of type Relaxation.  Modifies the underlying ontology.
     */
    public Relaxation createRelaxation(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_RELAXATION, DefaultRelaxation.class);
    }

    /**
     * Gets an instance of type Relaxation with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Relaxation getRelaxation(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_RELAXATION, DefaultRelaxation.class);
    }

    /**
     * Gets all instances of Relaxation from the ontology.
     */
    public Collection<? extends Relaxation> getAllRelaxationInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_RELAXATION, DefaultRelaxation.class);
    }


    /* ***************************************************
     * Class http://www.owl-ontologies.com/travel.owl#RetireeDestination
     */

    {
        javaMapping.add("http://www.owl-ontologies.com/travel.owl#RetireeDestination", RetireeDestination.class, DefaultRetireeDestination.class);
    }

    /**
     * Creates an instance of type RetireeDestination.  Modifies the underlying ontology.
     */
    public RetireeDestination createRetireeDestination(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_RETIREEDESTINATION, DefaultRetireeDestination.class);
    }

    /**
     * Gets an instance of type RetireeDestination with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public RetireeDestination getRetireeDestination(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_RETIREEDESTINATION, DefaultRetireeDestination.class);
    }

    /**
     * Gets all instances of RetireeDestination from the ontology.
     */
    public Collection<? extends RetireeDestination> getAllRetireeDestinationInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_RETIREEDESTINATION, DefaultRetireeDestination.class);
    }


    /* ***************************************************
     * Class http://www.owl-ontologies.com/travel.owl#RuralArea
     */

    {
        javaMapping.add("http://www.owl-ontologies.com/travel.owl#RuralArea", RuralArea.class, DefaultRuralArea.class);
    }

    /**
     * Creates an instance of type RuralArea.  Modifies the underlying ontology.
     */
    public RuralArea createRuralArea(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_RURALAREA, DefaultRuralArea.class);
    }

    /**
     * Gets an instance of type RuralArea with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public RuralArea getRuralArea(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_RURALAREA, DefaultRuralArea.class);
    }

    /**
     * Gets all instances of RuralArea from the ontology.
     */
    public Collection<? extends RuralArea> getAllRuralAreaInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_RURALAREA, DefaultRuralArea.class);
    }


    /* ***************************************************
     * Class http://www.owl-ontologies.com/travel.owl#Safari
     */

    {
        javaMapping.add("http://www.owl-ontologies.com/travel.owl#Safari", Safari.class, DefaultSafari.class);
    }

    /**
     * Creates an instance of type Safari.  Modifies the underlying ontology.
     */
    public Safari createSafari(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_SAFARI, DefaultSafari.class);
    }

    /**
     * Gets an instance of type Safari with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Safari getSafari(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_SAFARI, DefaultSafari.class);
    }

    /**
     * Gets all instances of Safari from the ontology.
     */
    public Collection<? extends Safari> getAllSafariInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_SAFARI, DefaultSafari.class);
    }


    /* ***************************************************
     * Class http://www.owl-ontologies.com/travel.owl#Sightseeing
     */

    {
        javaMapping.add("http://www.owl-ontologies.com/travel.owl#Sightseeing", Sightseeing.class, DefaultSightseeing.class);
    }

    /**
     * Creates an instance of type Sightseeing.  Modifies the underlying ontology.
     */
    public Sightseeing createSightseeing(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_SIGHTSEEING, DefaultSightseeing.class);
    }

    /**
     * Gets an instance of type Sightseeing with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Sightseeing getSightseeing(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_SIGHTSEEING, DefaultSightseeing.class);
    }

    /**
     * Gets all instances of Sightseeing from the ontology.
     */
    public Collection<? extends Sightseeing> getAllSightseeingInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_SIGHTSEEING, DefaultSightseeing.class);
    }


    /* ***************************************************
     * Class http://www.owl-ontologies.com/travel.owl#Sports
     */

    {
        javaMapping.add("http://www.owl-ontologies.com/travel.owl#Sports", Sports.class, DefaultSports.class);
    }

    /**
     * Creates an instance of type Sports.  Modifies the underlying ontology.
     */
    public Sports createSports(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_SPORTS, DefaultSports.class);
    }

    /**
     * Gets an instance of type Sports with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Sports getSports(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_SPORTS, DefaultSports.class);
    }

    /**
     * Gets all instances of Sports from the ontology.
     */
    public Collection<? extends Sports> getAllSportsInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_SPORTS, DefaultSports.class);
    }


    /* ***************************************************
     * Class http://www.owl-ontologies.com/travel.owl#Sunbathing
     */

    {
        javaMapping.add("http://www.owl-ontologies.com/travel.owl#Sunbathing", Sunbathing.class, DefaultSunbathing.class);
    }

    /**
     * Creates an instance of type Sunbathing.  Modifies the underlying ontology.
     */
    public Sunbathing createSunbathing(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_SUNBATHING, DefaultSunbathing.class);
    }

    /**
     * Gets an instance of type Sunbathing with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Sunbathing getSunbathing(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_SUNBATHING, DefaultSunbathing.class);
    }

    /**
     * Gets all instances of Sunbathing from the ontology.
     */
    public Collection<? extends Sunbathing> getAllSunbathingInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_SUNBATHING, DefaultSunbathing.class);
    }


    /* ***************************************************
     * Class http://www.owl-ontologies.com/travel.owl#Surfing
     */

    {
        javaMapping.add("http://www.owl-ontologies.com/travel.owl#Surfing", Surfing.class, DefaultSurfing.class);
    }

    /**
     * Creates an instance of type Surfing.  Modifies the underlying ontology.
     */
    public Surfing createSurfing(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_SURFING, DefaultSurfing.class);
    }

    /**
     * Gets an instance of type Surfing with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Surfing getSurfing(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_SURFING, DefaultSurfing.class);
    }

    /**
     * Gets all instances of Surfing from the ontology.
     */
    public Collection<? extends Surfing> getAllSurfingInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_SURFING, DefaultSurfing.class);
    }


    /* ***************************************************
     * Class http://www.owl-ontologies.com/travel.owl#Town
     */

    {
        javaMapping.add("http://www.owl-ontologies.com/travel.owl#Town", Town.class, DefaultTown.class);
    }

    /**
     * Creates an instance of type Town.  Modifies the underlying ontology.
     */
    public Town createTown(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_TOWN, DefaultTown.class);
    }

    /**
     * Gets an instance of type Town with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Town getTown(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_TOWN, DefaultTown.class);
    }

    /**
     * Gets all instances of Town from the ontology.
     */
    public Collection<? extends Town> getAllTownInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_TOWN, DefaultTown.class);
    }


    /* ***************************************************
     * Class http://www.owl-ontologies.com/travel.owl#UrbanArea
     */

    {
        javaMapping.add("http://www.owl-ontologies.com/travel.owl#UrbanArea", UrbanArea.class, DefaultUrbanArea.class);
    }

    /**
     * Creates an instance of type UrbanArea.  Modifies the underlying ontology.
     */
    public UrbanArea createUrbanArea(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_URBANAREA, DefaultUrbanArea.class);
    }

    /**
     * Gets an instance of type UrbanArea with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public UrbanArea getUrbanArea(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_URBANAREA, DefaultUrbanArea.class);
    }

    /**
     * Gets all instances of UrbanArea from the ontology.
     */
    public Collection<? extends UrbanArea> getAllUrbanAreaInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_URBANAREA, DefaultUrbanArea.class);
    }


    /* ***************************************************
     * Class http://www.owl-ontologies.com/travel.owl#Yoga
     */

    {
        javaMapping.add("http://www.owl-ontologies.com/travel.owl#Yoga", Yoga.class, DefaultYoga.class);
    }

    /**
     * Creates an instance of type Yoga.  Modifies the underlying ontology.
     */
    public Yoga createYoga(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_YOGA, DefaultYoga.class);
    }

    /**
     * Gets an instance of type Yoga with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Yoga getYoga(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_YOGA, DefaultYoga.class);
    }

    /**
     * Gets all instances of Yoga from the ontology.
     */
    public Collection<? extends Yoga> getAllYogaInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_YOGA, DefaultYoga.class);
    }


}
