package travel.impl;

import travel.*;


import java.net.URI;
import java.io.Serializable;
import javax.jdo.annotations.Embedded;
import javax.persistence.Basic;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;

import java.util.Collection;
import javax.xml.datatype.XMLGregorianCalendar;

import org.protege.owl.codegeneration.WrappedIndividual;
import org.protege.owl.codegeneration.impl.WrappedIndividualImpl;

import org.protege.owl.codegeneration.inference.CodeGenerationInference;

import org.semanticweb.owlapi.model.IRI;
import org.semanticweb.owlapi.model.OWLOntology;


/**
 * Generated by Protege (http://protege.stanford.edu).<br>
 * Source Class: DefaultSunbathing <br>
 * @version generated on Sun May 16 18:22:29 IST 2021 by ayushyadav
 */
@Entity
 public class DefaultSunbathing extends WrappedIndividualImpl implements Sunbathing , Serializable {
	 private static final long serialVersionUID = 1L;
	 @GeneratedValue
	 private long id;
	 @Id 
	 private String name;

private Collection < ? extends Contact > HasContact ; ;
private Collection < ? extends Destination > IsOfferedAt ;

    public DefaultSunbathing(CodeGenerationInference inference, IRI iri) {
        super(inference, iri);
	name = iri.toString();
	
	HasContact= getHasContact();
	IsOfferedAt= getIsOfferedAt();
    }





    /* ***************************************************
     * Object Property http://www.owl-ontologies.com/travel.owl#hasContact
     */
     
    public Collection<? extends Contact> getHasContact() {
        return getDelegate().getPropertyValues(getOwlIndividual(),
                                               Vocabulary.OBJECT_PROPERTY_HASCONTACT,
                                               DefaultContact.class);
    }

    public boolean hasHasContact() {
	   return !getHasContact().isEmpty();
    }

    public void addHasContact(Contact newHasContact) {
        getDelegate().addPropertyValue(getOwlIndividual(),
                                       Vocabulary.OBJECT_PROPERTY_HASCONTACT,
                                       newHasContact);
    }

    public void removeHasContact(Contact oldHasContact) {
        getDelegate().removePropertyValue(getOwlIndividual(),
                                          Vocabulary.OBJECT_PROPERTY_HASCONTACT,
                                          oldHasContact);
    }


    /* ***************************************************
     * Object Property http://www.owl-ontologies.com/travel.owl#isOfferedAt
     */
     
    public Collection<? extends Destination> getIsOfferedAt() {
        return getDelegate().getPropertyValues(getOwlIndividual(),
                                               Vocabulary.OBJECT_PROPERTY_ISOFFEREDAT,
                                               DefaultDestination.class);
    }

    public boolean hasIsOfferedAt() {
	   return !getIsOfferedAt().isEmpty();
    }

    public void addIsOfferedAt(Destination newIsOfferedAt) {
        getDelegate().addPropertyValue(getOwlIndividual(),
                                       Vocabulary.OBJECT_PROPERTY_ISOFFEREDAT,
                                       newIsOfferedAt);
    }

    public void removeIsOfferedAt(Destination oldIsOfferedAt) {
        getDelegate().removePropertyValue(getOwlIndividual(),
                                          Vocabulary.OBJECT_PROPERTY_ISOFFEREDAT,
                                          oldIsOfferedAt);
    }


}
